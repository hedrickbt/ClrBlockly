// Do not edit this file; automatically generated by build.py.
'use strict';


Blockly.Arduino = new Blockly.Generator("Arduino");
Blockly.Arduino.addReservedWords("False,None,True,and,as,assert,break,class,continue,def,del,elif,else,except,exec,finally,for,from,global,if,import,in,is,lambda,nonlocal,not,or,pass,print,raise,return,try,while,with,yield,NotImplemented,Ellipsis,__debug__,quit,exit,copyright,license,credits,ArithmeticError,AssertionError,AttributeError,BaseException,BlockingIOError,BrokenPipeError,BufferError,BytesWarning,ChildProcessError,ConnectionAbortedError,ConnectionError,ConnectionRefusedError,ConnectionResetError,DeprecationWarning,EOFError,Ellipsis,EnvironmentError,Exception,FileExistsError,FileNotFoundError,FloatingPointError,FutureWarning,GeneratorExit,IOError,ImportError,ImportWarning,IndentationError,IndexError,InterruptedError,IsADirectoryError,KeyError,KeyboardInterrupt,LookupError,MemoryError,ModuleNotFoundError,NameError,NotADirectoryError,NotImplemented,NotImplementedError,OSError,OverflowError,PendingDeprecationWarning,PermissionError,ProcessLookupError,RecursionError,ReferenceError,ResourceWarning,RuntimeError,RuntimeWarning,StandardError,StopAsyncIteration,StopIteration,SyntaxError,SyntaxWarning,SystemError,SystemExit,TabError,TimeoutError,TypeError,UnboundLocalError,UnicodeDecodeError,UnicodeEncodeError,UnicodeError,UnicodeTranslateError,UnicodeWarning,UserWarning,ValueError,Warning,ZeroDivisionError,_,__build_class__,__debug__,__doc__,__import__,__loader__,__name__,__package__,__spec__,abs,all,any,apply,ascii,basestring,bin,bool,buffer,bytearray,bytes,callable,chr,classmethod,cmp,coerce,compile,complex,copyright,credits,delattr,dict,dir,divmod,enumerate,eval,exec,execfile,exit,file,filter,float,format,frozenset,getattr,globals,hasattr,hash,help,hex,id,input,int,intern,isinstance,issubclass,iter,len,license,list,locals,long,map,max,memoryview,min,next,object,oct,open,ord,pow,print,property,quit,range,raw_input,reduce,reload,repr,reversed,round,set,setattr,slice,sorted,staticmethod,str,sum,super,tuple,type,unichr,unicode,vars,xrange,zip");
Blockly.Arduino.ORDER_ATOMIC = 0;
Blockly.Arduino.ORDER_COLLECTION = 1;
Blockly.Arduino.ORDER_STRING_CONVERSION = 1;
Blockly.Arduino.ORDER_MEMBER = 2.1;
Blockly.Arduino.ORDER_FUNCTION_CALL = 2.2;
Blockly.Arduino.ORDER_EXPONENTIATION = 3;
Blockly.Arduino.ORDER_UNARY_SIGN = 4;
Blockly.Arduino.ORDER_BITWISE_NOT = 4;
Blockly.Arduino.ORDER_MULTIPLICATIVE = 5;
Blockly.Arduino.ORDER_ADDITIVE = 6;
Blockly.Arduino.ORDER_BITWISE_SHIFT = 7;
Blockly.Arduino.ORDER_BITWISE_AND = 8;
Blockly.Arduino.ORDER_BITWISE_XOR = 9;
Blockly.Arduino.ORDER_BITWISE_OR = 10;
Blockly.Arduino.ORDER_RELATIONAL = 11;
Blockly.Arduino.ORDER_LOGICAL_NOT = 12;
Blockly.Arduino.ORDER_LOGICAL_AND = 13;
Blockly.Arduino.ORDER_LOGICAL_OR = 14;
Blockly.Arduino.ORDER_CONDITIONAL = 15;
Blockly.Arduino.ORDER_LAMBDA = 16;
Blockly.Arduino.ORDER_NONE = 99;
Blockly.Arduino.ORDER_OVERRIDES = [
    [Blockly.Arduino.ORDER_FUNCTION_CALL, Blockly.Arduino.ORDER_MEMBER],
    [Blockly.Arduino.ORDER_FUNCTION_CALL, Blockly.Arduino.ORDER_FUNCTION_CALL],
    [Blockly.Arduino.ORDER_MEMBER, Blockly.Arduino.ORDER_MEMBER],
    [Blockly.Arduino.ORDER_MEMBER, Blockly.Arduino.ORDER_FUNCTION_CALL],
    [Blockly.Arduino.ORDER_LOGICAL_NOT, Blockly.Arduino.ORDER_LOGICAL_NOT],
    [Blockly.Arduino.ORDER_LOGICAL_AND, Blockly.Arduino.ORDER_LOGICAL_AND],
    [Blockly.Arduino.ORDER_LOGICAL_OR, Blockly.Arduino.ORDER_LOGICAL_OR]
];
Blockly.Arduino.init = function(a) {
    Blockly.Arduino.PASS = this.INDENT + "pass\n";
    Blockly.Arduino.definitions_ = Object.create(null);
    Blockly.Arduino.functionNames_ = Object.create(null);
    Blockly.Arduino.variableDB_ ? Blockly.Arduino.variableDB_.reset() : Blockly.Arduino.variableDB_ = new Blockly.Names(Blockly.Arduino.RESERVED_WORDS_);
    Blockly.Arduino.variableDB_.setVariableMap(a.getVariableMap());
    for (var b = [], c = Blockly.Variables.allDeveloperVariables(a), d = 0; d < c.length; d++) b.push('int ' + Blockly.Arduino.variableDB_.getName(c[d], Blockly.Names.DEVELOPER_VARIABLE_TYPE) +
        " = 0;");
    a = Blockly.Variables.allUsedVarModels(a);
    for (d = 0; d < a.length; d++) b.push('int ' + Blockly.Arduino.variableDB_.getName(a[d].getId(), Blockly.Variables.NAME_TYPE) + " = 0;");
    Blockly.Arduino.definitions_.variables = b.join("\n")
};
Blockly.Arduino.finish = function(a) {
    var b = [],
        c = [],
        d;
    for (d in Blockly.Arduino.definitions_) {
        var e = Blockly.Arduino.definitions_[d];
        e.match(/^(from\s+\S+\s+)?import\s+\S+/) ? b.push(e) : c.push(e)
    }
    delete Blockly.Arduino.definitions_;
    delete Blockly.Arduino.functionNames_;
    Blockly.Arduino.variableDB_.reset();
    return (b.join("\n") + "\n\n" + c.join("\n\n")).replace(/\n\n+/g, "\n\n").replace(/\n*$/, "\n\n\n") + a
};
Blockly.Arduino.scrubNakedValue = function(a) {
    return a + "\n"
};
Blockly.Arduino.quote_ = function(a) {
    a = a.replace(/\\/g, "\\\\").replace(/\n/g, "\\\n").replace(/%/g, "\\%");
    var b = "'"; - 1 !== a.indexOf("'") && (-1 === a.indexOf('"') ? b = '"' : a = a.replace(/'/g, "\\'"));
    return b + a + b
};
Blockly.Arduino.scrub_ = function(a, b) {
    var c = "";
    if (!a.outputConnection || !a.outputConnection.targetConnection) {
        var d = a.getCommentText();
        (d = Blockly.utils.wrap(d, Blockly.Arduino.COMMENT_WRAP - 3)) && (c = a.getProcedureDef ? c + ('"""' + d + '\n"""\n') : c + Blockly.Arduino.prefixLines(d + "\n", "# "));
        for (var e = 0; e < a.inputList.length; e++) a.inputList[e].type == Blockly.INPUT_VALUE && (d = a.inputList[e].connection.targetBlock()) && (d = Blockly.Arduino.allNestedComments(d)) && (c += Blockly.Arduino.prefixLines(d, "# "))
    }
    e = a.nextConnection && a.nextConnection.targetBlock();
    e = Blockly.Arduino.blockToCode(e);
    return c + b + e
};
Blockly.Arduino.getAdjustedInt = function(a, b, c, d) {
    c = c || 0;
    a.workspace.options.oneBasedIndex && c--;
    var e = a.workspace.options.oneBasedIndex ? "1" : "0";
    a = Blockly.Arduino.valueToCode(a, b, c ? Blockly.Arduino.ORDER_ADDITIVE : Blockly.Arduino.ORDER_NONE) || e;
    Blockly.isNumber(a) ? (a = parseInt(a, 10) + c, d && (a = -a)) : (a = 0 < c ? "int(" + a + " + " + c + ")" : 0 > c ? "int(" + a + " - " + -c + ")" : "int(" + a + ")", d && (a = "-" + a));
    return a
};
Blockly.Arduino.colour = {};
Blockly.Arduino.colour_picker = function(a) {
    return ["'" + a.getFieldValue("COLOUR") + "'", Blockly.Arduino.ORDER_ATOMIC]
};
Blockly.Arduino.colour_random = function(a) {
    Blockly.Arduino.definitions_.import_random = "import random";
    return ["'#%06x' % random.randint(0, 2**24 - 1)", Blockly.Arduino.ORDER_FUNCTION_CALL]
};
Blockly.Arduino.colour_rgb = function(a) {
    var b = Blockly.Arduino.provideFunction_("colour_rgb", ["def " + Blockly.Arduino.FUNCTION_NAME_PLACEHOLDER_ + "(r, g, b):", "  r = round(min(100, max(0, r)) * 2.55)", "  g = round(min(100, max(0, g)) * 2.55)", "  b = round(min(100, max(0, b)) * 2.55)", "  return '#%02x%02x%02x' % (r, g, b)"]),
        c = Blockly.Arduino.valueToCode(a, "RED", Blockly.Arduino.ORDER_NONE) || 0,
        d = Blockly.Arduino.valueToCode(a, "GREEN", Blockly.Arduino.ORDER_NONE) || 0;
    a = Blockly.Arduino.valueToCode(a, "BLUE", Blockly.Arduino.ORDER_NONE) ||
        0;
    return [b + "(" + c + ", " + d + ", " + a + ")", Blockly.Arduino.ORDER_FUNCTION_CALL]
};
Blockly.Arduino.colour_blend = function(a) {
    var b = Blockly.Arduino.provideFunction_("colour_blend", ["def " + Blockly.Arduino.FUNCTION_NAME_PLACEHOLDER_ + "(colour1, colour2, ratio):", "  r1, r2 = int(colour1[1:3], 16), int(colour2[1:3], 16)", "  g1, g2 = int(colour1[3:5], 16), int(colour2[3:5], 16)", "  b1, b2 = int(colour1[5:7], 16), int(colour2[5:7], 16)", "  ratio = min(1, max(0, ratio))", "  r = round(r1 * (1 - ratio) + r2 * ratio)", "  g = round(g1 * (1 - ratio) + g2 * ratio)", "  b = round(b1 * (1 - ratio) + b2 * ratio)",
            "  return '#%02x%02x%02x' % (r, g, b)"
        ]),
        c = Blockly.Arduino.valueToCode(a, "COLOUR1", Blockly.Arduino.ORDER_NONE) || "'#000000'",
        d = Blockly.Arduino.valueToCode(a, "COLOUR2", Blockly.Arduino.ORDER_NONE) || "'#000000'";
    a = Blockly.Arduino.valueToCode(a, "RATIO", Blockly.Arduino.ORDER_NONE) || 0;
    return [b + "(" + c + ", " + d + ", " + a + ")", Blockly.Arduino.ORDER_FUNCTION_CALL]
};
Blockly.Arduino.lists = {};
Blockly.Arduino.lists_create_empty = function(a) {
    return ["[]", Blockly.Arduino.ORDER_ATOMIC]
};
Blockly.Arduino.lists_create_with = function(a) {
    for (var b = Array(a.itemCount_), c = 0; c < a.itemCount_; c++) b[c] = Blockly.Arduino.valueToCode(a, "ADD" + c, Blockly.Arduino.ORDER_NONE) || "None";
    return ["[" + b.join(", ") + "]", Blockly.Arduino.ORDER_ATOMIC]
};
Blockly.Arduino.lists_repeat = function(a) {
    var b = Blockly.Arduino.valueToCode(a, "ITEM", Blockly.Arduino.ORDER_NONE) || "None";
    a = Blockly.Arduino.valueToCode(a, "NUM", Blockly.Arduino.ORDER_MULTIPLICATIVE) || "0";
    return ["[" + b + "] * " + a, Blockly.Arduino.ORDER_MULTIPLICATIVE]
};
Blockly.Arduino.lists_length = function(a) {
    return ["len(" + (Blockly.Arduino.valueToCode(a, "VALUE", Blockly.Arduino.ORDER_NONE) || "[]") + ")", Blockly.Arduino.ORDER_FUNCTION_CALL]
};
Blockly.Arduino.lists_isEmpty = function(a) {
    return ["not len(" + (Blockly.Arduino.valueToCode(a, "VALUE", Blockly.Arduino.ORDER_NONE) || "[]") + ")", Blockly.Arduino.ORDER_LOGICAL_NOT]
};
Blockly.Arduino.lists_indexOf = function(a) {
    var b = Blockly.Arduino.valueToCode(a, "FIND", Blockly.Arduino.ORDER_NONE) || "[]",
        c = Blockly.Arduino.valueToCode(a, "VALUE", Blockly.Arduino.ORDER_NONE) || "''";
    if (a.workspace.options.oneBasedIndex) var d = " 0",
        e = " + 1",
        f = "";
    else d = " -1", e = "", f = " - 1";
    if ("FIRST" == a.getFieldValue("END")) return a = Blockly.Arduino.provideFunction_("first_index", ["def " + Blockly.Arduino.FUNCTION_NAME_PLACEHOLDER_ + "(my_list, elem):", "  try: index = my_list.index(elem)" + e, "  except: index =" + d, "  return index"]), [a + "(" + c + ", " + b + ")", Blockly.Arduino.ORDER_FUNCTION_CALL];
    a = Blockly.Arduino.provideFunction_("last_index", ["def " + Blockly.Arduino.FUNCTION_NAME_PLACEHOLDER_ + "(my_list, elem):", "  try: index = len(my_list) - my_list[::-1].index(elem)" + f, "  except: index =" + d, "  return index"]);
    return [a + "(" + c + ", " + b + ")", Blockly.Arduino.ORDER_FUNCTION_CALL]
};
Blockly.Arduino.lists_getIndex = function(a) {
    var b = a.getFieldValue("MODE") || "GET",
        c = a.getFieldValue("WHERE") || "FROM_START",
        d = Blockly.Arduino.valueToCode(a, "VALUE", "RANDOM" == c ? Blockly.Arduino.ORDER_NONE : Blockly.Arduino.ORDER_MEMBER) || "[]";
    switch (c) {
        case "FIRST":
            if ("GET" == b) return [d + "[0]", Blockly.Arduino.ORDER_MEMBER];
            if ("GET_REMOVE" == b) return [d + ".pop(0)", Blockly.Arduino.ORDER_FUNCTION_CALL];
            if ("REMOVE" == b) return d + ".pop(0)\n";
            break;
        case "LAST":
            if ("GET" == b) return [d + "[-1]", Blockly.Arduino.ORDER_MEMBER];
            if ("GET_REMOVE" ==
                b) return [d + ".pop()", Blockly.Arduino.ORDER_FUNCTION_CALL];
            if ("REMOVE" == b) return d + ".pop()\n";
            break;
        case "FROM_START":
            a = Blockly.Arduino.getAdjustedInt(a, "AT");
            if ("GET" == b) return [d + "[" + a + "]", Blockly.Arduino.ORDER_MEMBER];
            if ("GET_REMOVE" == b) return [d + ".pop(" + a + ")", Blockly.Arduino.ORDER_FUNCTION_CALL];
            if ("REMOVE" == b) return d + ".pop(" + a + ")\n";
            break;
        case "FROM_END":
            a = Blockly.Arduino.getAdjustedInt(a, "AT", 1, !0);
            if ("GET" == b) return [d + "[" + a + "]", Blockly.Arduino.ORDER_MEMBER];
            if ("GET_REMOVE" == b) return [d + ".pop(" + a + ")",
                Blockly.Arduino.ORDER_FUNCTION_CALL
            ];
            if ("REMOVE" == b) return d + ".pop(" + a + ")\n";
            break;
        case "RANDOM":
            Blockly.Arduino.definitions_.import_random = "import random";
            if ("GET" == b) return ["random.choice(" + d + ")", Blockly.Arduino.ORDER_FUNCTION_CALL];
            d = Blockly.Arduino.provideFunction_("lists_remove_random_item", ["def " + Blockly.Arduino.FUNCTION_NAME_PLACEHOLDER_ + "(myList):", "  x = int(random.random() * len(myList))", "  return myList.pop(x)"]) + "(" + d + ")";
            if ("GET_REMOVE" == b) return [d, Blockly.Arduino.ORDER_FUNCTION_CALL];
            if ("REMOVE" ==
                b) return d + "\n"
    }
    throw "Unhandled combination (lists_getIndex).";
};
Blockly.Arduino.lists_setIndex = function(a) {
    var b = Blockly.Arduino.valueToCode(a, "LIST", Blockly.Arduino.ORDER_MEMBER) || "[]",
        c = a.getFieldValue("MODE") || "GET",
        d = a.getFieldValue("WHERE") || "FROM_START",
        e = Blockly.Arduino.valueToCode(a, "TO", Blockly.Arduino.ORDER_NONE) || "None";
    switch (d) {
        case "FIRST":
            if ("SET" == c) return b + "[0] = " + e + "\n";
            if ("INSERT" == c) return b + ".insert(0, " + e + ")\n";
            break;
        case "LAST":
            if ("SET" == c) return b + "[-1] = " + e + "\n";
            if ("INSERT" == c) return b + ".append(" + e + ")\n";
            break;
        case "FROM_START":
            a = Blockly.Arduino.getAdjustedInt(a,
                "AT");
            if ("SET" == c) return b + "[" + a + "] = " + e + "\n";
            if ("INSERT" == c) return b + ".insert(" + a + ", " + e + ")\n";
            break;
        case "FROM_END":
            a = Blockly.Arduino.getAdjustedInt(a, "AT", 1, !0);
            if ("SET" == c) return b + "[" + a + "] = " + e + "\n";
            if ("INSERT" == c) return b + ".insert(" + a + ", " + e + ")\n";
            break;
        case "RANDOM":
            Blockly.Arduino.definitions_.import_random = "import random";
            b.match(/^\w+$/) ? a = "" : (a = Blockly.Arduino.variableDB_.getDistinctName("tmp_list", Blockly.Variables.NAME_TYPE), d = a + " = " + b + "\n", b = a, a = d);
            d = Blockly.Arduino.variableDB_.getDistinctName("tmp_x",
                Blockly.Variables.NAME_TYPE);
            a += d + " = int(random.random() * len(" + b + "))\n";
            if ("SET" == c) return a + (b + "[" + d + "] = " + e + "\n");
            if ("INSERT" == c) return a + (b + ".insert(" + d + ", " + e + ")\n")
    }
    throw "Unhandled combination (lists_setIndex).";
};
Blockly.Arduino.lists_getSublist = function(a) {
    var b = Blockly.Arduino.valueToCode(a, "LIST", Blockly.Arduino.ORDER_MEMBER) || "[]",
        c = a.getFieldValue("WHERE1"),
        d = a.getFieldValue("WHERE2");
    switch (c) {
        case "FROM_START":
            c = Blockly.Arduino.getAdjustedInt(a, "AT1");
            "0" == c && (c = "");
            break;
        case "FROM_END":
            c = Blockly.Arduino.getAdjustedInt(a, "AT1", 1, !0);
            break;
        case "FIRST":
            c = "";
            break;
        default:
            throw "Unhandled option (lists_getSublist)";
    }
    switch (d) {
        case "FROM_START":
            a = Blockly.Arduino.getAdjustedInt(a, "AT2", 1);
            break;
        case "FROM_END":
            a =
                Blockly.Arduino.getAdjustedInt(a, "AT2", 0, !0);
            Blockly.isNumber(String(a)) ? "0" == a && (a = "") : (Blockly.Arduino.definitions_.import_sys = "import sys", a += " or sys.maxsize");
            break;
        case "LAST":
            a = "";
            break;
        default:
            throw "Unhandled option (lists_getSublist)";
    }
    return [b + "[" + c + " : " + a + "]", Blockly.Arduino.ORDER_MEMBER]
};
Blockly.Arduino.lists_sort = function(a) {
    var b = Blockly.Arduino.valueToCode(a, "LIST", Blockly.Arduino.ORDER_NONE) || "[]",
        c = a.getFieldValue("TYPE");
    a = "1" === a.getFieldValue("DIRECTION") ? "False" : "True";
    return [Blockly.Arduino.provideFunction_("lists_sort", ["def " + Blockly.Arduino.FUNCTION_NAME_PLACEHOLDER_ + "(my_list, type, reverse):", "  def try_float(s):", "    try:", "      return float(s)", "    except:", "      return 0", "  key_funcs = {", '    "NUMERIC": try_float,', '    "TEXT": str,', '    "IGNORE_CASE": lambda s: str(s).lower()',
        "  }", "  key_func = key_funcs[type]", "  list_cpy = list(my_list)", "  return sorted(list_cpy, key=key_func, reverse=reverse)"
    ]) + "(" + b + ', "' + c + '", ' + a + ")", Blockly.Arduino.ORDER_FUNCTION_CALL]
};
Blockly.Arduino.lists_split = function(a) {
    var b = a.getFieldValue("MODE");
    if ("SPLIT" == b) b = Blockly.Arduino.valueToCode(a, "INPUT", Blockly.Arduino.ORDER_MEMBER) || "''", a = Blockly.Arduino.valueToCode(a, "DELIM", Blockly.Arduino.ORDER_NONE), a = b + ".split(" + a + ")";
    else if ("JOIN" == b) b = Blockly.Arduino.valueToCode(a, "INPUT", Blockly.Arduino.ORDER_NONE) || "[]", a = Blockly.Arduino.valueToCode(a, "DELIM", Blockly.Arduino.ORDER_MEMBER) || "''", a = a + ".join(" + b + ")";
    else throw "Unknown mode: " + b;
    return [a, Blockly.Arduino.ORDER_FUNCTION_CALL]
};
Blockly.Arduino.lists_reverse = function(a) {
    return ["list(reversed(" + (Blockly.Arduino.valueToCode(a, "LIST", Blockly.Arduino.ORDER_NONE) || "[]") + "))", Blockly.Arduino.ORDER_FUNCTION_CALL]
};
Blockly.Arduino.logic = {};
Blockly.Arduino.controls_if = function(a) {
    var b = 0,
        c = "";
    do {
        var d = Blockly.Arduino.valueToCode(a, "IF" + b, Blockly.Arduino.ORDER_NONE) || "False";
        var e = Blockly.Arduino.statementToCode(a, "DO" + b) || Blockly.Arduino.PASS;
        c += (0 == b ? "if " : "elif ") + d + ":\n" + e;
        ++b
    } while (a.getInput("IF" + b));
    a.getInput("ELSE") && (e = Blockly.Arduino.statementToCode(a, "ELSE") || Blockly.Arduino.PASS, c += "else:\n" + e);
    return c
};
Blockly.Arduino.controls_ifelse = Blockly.Arduino.controls_if;
Blockly.Arduino.logic_compare = function(a) {
    var b = {
            EQ: "==",
            NEQ: "!=",
            LT: "<",
            LTE: "<=",
            GT: ">",
            GTE: ">="
        }[a.getFieldValue("OP")],
        c = Blockly.Arduino.ORDER_RELATIONAL,
        d = Blockly.Arduino.valueToCode(a, "A", c) || "0";
    a = Blockly.Arduino.valueToCode(a, "B", c) || "0";
    return [d + " " + b + " " + a, c]
};
Blockly.Arduino.logic_operation = function(a) {
    var b = "AND" == a.getFieldValue("OP") ? "and" : "or",
        c = "and" == b ? Blockly.Arduino.ORDER_LOGICAL_AND : Blockly.Arduino.ORDER_LOGICAL_OR,
        d = Blockly.Arduino.valueToCode(a, "A", c);
    a = Blockly.Arduino.valueToCode(a, "B", c);
    if (d || a) {
        var e = "and" == b ? "True" : "False";
        d || (d = e);
        a || (a = e)
    } else a = d = "False";
    return [d + " " + b + " " + a, c]
};
Blockly.Arduino.logic_negate = function(a) {
    return ["not " + (Blockly.Arduino.valueToCode(a, "BOOL", Blockly.Arduino.ORDER_LOGICAL_NOT) || "True"), Blockly.Arduino.ORDER_LOGICAL_NOT]
};
Blockly.Arduino.logic_boolean = function(a) {
    return ["TRUE" == a.getFieldValue("BOOL") ? "True" : "False", Blockly.Arduino.ORDER_ATOMIC]
};
Blockly.Arduino.logic_null = function(a) {
    return ["None", Blockly.Arduino.ORDER_ATOMIC]
};
Blockly.Arduino.logic_ternary = function(a) {
    var b = Blockly.Arduino.valueToCode(a, "IF", Blockly.Arduino.ORDER_CONDITIONAL) || "False",
        c = Blockly.Arduino.valueToCode(a, "THEN", Blockly.Arduino.ORDER_CONDITIONAL) || "None";
    a = Blockly.Arduino.valueToCode(a, "ELSE", Blockly.Arduino.ORDER_CONDITIONAL) || "None";
    return [c + " if " + b + " else " + a, Blockly.Arduino.ORDER_CONDITIONAL]
};
Blockly.Arduino.loops = {};
Blockly.Arduino.controls_repeat_ext = function(a) {
    var b = a.getField("TIMES") ? String(parseInt(a.getFieldValue("TIMES"), 10)) : Blockly.Arduino.valueToCode(a, "TIMES", Blockly.Arduino.ORDER_NONE) || "0";
    b = Blockly.isNumber(b) ? parseInt(b, 10) : "int(" + b + ")";
    var c = Blockly.Arduino.statementToCode(a, "DO");
    c = Blockly.Arduino.addLoopTrap(c, a.id) || Blockly.Arduino.PASS;
    return "for " + Blockly.Arduino.variableDB_.getDistinctName("count", Blockly.Variables.NAME_TYPE) + " in range(" + b + "):\n" + c
};
Blockly.Arduino.controls_repeat = Blockly.Arduino.controls_repeat_ext;
Blockly.Arduino.controls_whileUntil = function(a) {
    var b = "UNTIL" == a.getFieldValue("MODE"),
        c = Blockly.Arduino.valueToCode(a, "BOOL", b ? Blockly.Arduino.ORDER_LOGICAL_NOT : Blockly.Arduino.ORDER_NONE) || "False",
        d = Blockly.Arduino.statementToCode(a, "DO");
    d = Blockly.Arduino.addLoopTrap(d, a.id) || Blockly.Arduino.PASS;
    b && (c = "not " + c);
    return "while " + c + ":\n" + d
};
Blockly.Arduino.controls_for = function(a) {
    var b = Blockly.Arduino.variableDB_.getName(a.getFieldValue("VAR"), Blockly.Variables.NAME_TYPE),
        c = Blockly.Arduino.valueToCode(a, "FROM", Blockly.Arduino.ORDER_NONE) || "0",
        d = Blockly.Arduino.valueToCode(a, "TO", Blockly.Arduino.ORDER_NONE) || "0",
        e = Blockly.Arduino.valueToCode(a, "BY", Blockly.Arduino.ORDER_NONE) || "1",
        f = Blockly.Arduino.statementToCode(a, "DO");
    f = Blockly.Arduino.addLoopTrap(f, a.id) || Blockly.Arduino.PASS;
    var g = "",
        h = function() {
            return Blockly.Arduino.provideFunction_("upRange", ["def " + Blockly.Arduino.FUNCTION_NAME_PLACEHOLDER_ + "(start, stop, step):", "  while start <= stop:", "    yield start", "    start += abs(step)"])
        },
        k = function() {
            return Blockly.Arduino.provideFunction_("downRange", ["def " + Blockly.Arduino.FUNCTION_NAME_PLACEHOLDER_ + "(start, stop, step):", "  while start >= stop:", "    yield start", "    start -= abs(step)"])
        };
    a = function(a, b, c) {
        return "(" + a + " <= " + b + ") and " + h() + "(" + a + ", " + b + ", " + c + ") or " + k() + "(" + a + ", " + b + ", " + c + ")"
    };
    if (Blockly.isNumber(c) && Blockly.isNumber(d) &&
        Blockly.isNumber(e)) c = parseFloat(c), d = parseFloat(d), e = Math.abs(parseFloat(e)), 0 === c % 1 && 0 === d % 1 && 0 === e % 1 ? (c <= d ? (d++, a = 0 == c && 1 == e ? d : c + ", " + d, 1 != e && (a += ", " + e)) : (d--, a = c + ", " + d + ", -" + e), a = "range(" + a + ")") : (a = c < d ? h() : k(), a += "(" + c + ", " + d + ", " + e + ")");
    else {
        var l = function(a, c) {
            if (Blockly.isNumber(a)) a = parseFloat(a);
            else if (a.match(/^\w+$/)) a = "float(" + a + ")";
            else {
                var d = Blockly.Arduino.variableDB_.getDistinctName(b + c, Blockly.Variables.NAME_TYPE);
                g += d + " = float(" + a + ")\n";
                a = d
            }
            return a
        };
        c = l(c, "_start");
        d = l(d, "_end");
        l(e, "_inc");
        a = "number" == typeof c && "number" == typeof d ? c < d ? h(c, d, e) : k(c, d, e) : a(c, d, e)
    }
    return g += "for " + b + " in " + a + ":\n" + f
};
Blockly.Arduino.controls_forEach = function(a) {
    var b = Blockly.Arduino.variableDB_.getName(a.getFieldValue("VAR"), Blockly.Variables.NAME_TYPE),
        c = Blockly.Arduino.valueToCode(a, "LIST", Blockly.Arduino.ORDER_RELATIONAL) || "[]",
        d = Blockly.Arduino.statementToCode(a, "DO");
    d = Blockly.Arduino.addLoopTrap(d, a.id) || Blockly.Arduino.PASS;
    return "for " + b + " in " + c + ":\n" + d
};
Blockly.Arduino.controls_flow_statements = function(a) {
    switch (a.getFieldValue("FLOW")) {
        case "BREAK":
            return "break\n";
        case "CONTINUE":
            return "continue\n"
    }
    throw "Unknown flow statement.";
};
Blockly.Arduino.math = {};
Blockly.Arduino.addReservedWords("math,random,Number");
Blockly.Arduino.math_number = function(a) {
    a = parseFloat(a.getFieldValue("NUM"));
    if (Infinity == a) {
        a = 'float("inf")';
        var b = Blockly.Arduino.ORDER_FUNCTION_CALL
    } else -Infinity == a ? (a = '-float("inf")', b = Blockly.Arduino.ORDER_UNARY_SIGN) : b = 0 > a ? Blockly.Arduino.ORDER_UNARY_SIGN : Blockly.Arduino.ORDER_ATOMIC;
    return [a, b]
};
Blockly.Arduino.math_arithmetic = function(a) {
    var b = {
            ADD: [" + ", Blockly.Arduino.ORDER_ADDITIVE],
            MINUS: [" - ", Blockly.Arduino.ORDER_ADDITIVE],
            MULTIPLY: [" * ", Blockly.Arduino.ORDER_MULTIPLICATIVE],
            DIVIDE: [" / ", Blockly.Arduino.ORDER_MULTIPLICATIVE],
            POWER: [" ** ", Blockly.Arduino.ORDER_EXPONENTIATION]
        }[a.getFieldValue("OP")],
        c = b[0];
    b = b[1];
    var d = Blockly.Arduino.valueToCode(a, "A", b) || "0";
    a = Blockly.Arduino.valueToCode(a, "B", b) || "0";
    return [d + c + a, b]
};
Blockly.Arduino.math_single = function(a) {
    var b = a.getFieldValue("OP");
    if ("NEG" == b) {
        var c = Blockly.Arduino.valueToCode(a, "NUM", Blockly.Arduino.ORDER_UNARY_SIGN) || "0";
        return ["-" + c, Blockly.Arduino.ORDER_UNARY_SIGN]
    }
    Blockly.Arduino.definitions_.import_math = "import math";
    a = "SIN" == b || "COS" == b || "TAN" == b ? Blockly.Arduino.valueToCode(a, "NUM", Blockly.Arduino.ORDER_MULTIPLICATIVE) || "0" : Blockly.Arduino.valueToCode(a, "NUM", Blockly.Arduino.ORDER_NONE) || "0";
    switch (b) {
        case "ABS":
            c = "math.fabs(" + a + ")";
            break;
        case "ROOT":
            c = "math.sqrt(" +
                a + ")";
            break;
        case "LN":
            c = "math.log(" + a + ")";
            break;
        case "LOG10":
            c = "math.log10(" + a + ")";
            break;
        case "EXP":
            c = "math.exp(" + a + ")";
            break;
        case "POW10":
            c = "math.pow(10," + a + ")";
            break;
        case "ROUND":
            c = "round(" + a + ")";
            break;
        case "ROUNDUP":
            c = "math.ceil(" + a + ")";
            break;
        case "ROUNDDOWN":
            c = "math.floor(" + a + ")";
            break;
        case "SIN":
            c = "math.sin(" + a + " / 180.0 * math.pi)";
            break;
        case "COS":
            c = "math.cos(" + a + " / 180.0 * math.pi)";
            break;
        case "TAN":
            c = "math.tan(" + a + " / 180.0 * math.pi)"
    }
    if (c) return [c, Blockly.Arduino.ORDER_FUNCTION_CALL];
    switch (b) {
        case "ASIN":
            c =
                "math.asin(" + a + ") / math.pi * 180";
            break;
        case "ACOS":
            c = "math.acos(" + a + ") / math.pi * 180";
            break;
        case "ATAN":
            c = "math.atan(" + a + ") / math.pi * 180";
            break;
        default:
            throw "Unknown math operator: " + b;
    }
    return [c, Blockly.Arduino.ORDER_MULTIPLICATIVE]
};
Blockly.Arduino.math_constant = function(a) {
    var b = {
        PI: ["math.pi", Blockly.Arduino.ORDER_MEMBER],
        E: ["math.e", Blockly.Arduino.ORDER_MEMBER],
        GOLDEN_RATIO: ["(1 + math.sqrt(5)) / 2", Blockly.Arduino.ORDER_MULTIPLICATIVE],
        SQRT2: ["math.sqrt(2)", Blockly.Arduino.ORDER_MEMBER],
        SQRT1_2: ["math.sqrt(1.0 / 2)", Blockly.Arduino.ORDER_MEMBER],
        INFINITY: ["float('inf')", Blockly.Arduino.ORDER_ATOMIC]
    };
    a = a.getFieldValue("CONSTANT");
    "INFINITY" != a && (Blockly.Arduino.definitions_.import_math = "import math");
    return b[a]
};
Blockly.Arduino.math_number_property = function(a) {
    var b = Blockly.Arduino.valueToCode(a, "NUMBER_TO_CHECK", Blockly.Arduino.ORDER_MULTIPLICATIVE) || "0",
        c = a.getFieldValue("PROPERTY");
    if ("PRIME" == c) return Blockly.Arduino.definitions_.import_math = "import math", Blockly.Arduino.definitions_.from_numbers_import_Number = "from numbers import Number", [Blockly.Arduino.provideFunction_("math_isPrime", ["def " + Blockly.Arduino.FUNCTION_NAME_PLACEHOLDER_ + "(n):", "  # https://en.wikipedia.org/wiki/Primality_test#Naive_methods",
        "  # If n is not a number but a string, try parsing it.", "  if not isinstance(n, Number):", "    try:", "      n = float(n)", "    except:", "      return False", "  if n == 2 or n == 3:", "    return True", "  # False if n is negative, is 1, or not whole, or if n is divisible by 2 or 3.", "  if n <= 1 or n % 1 != 0 or n % 2 == 0 or n % 3 == 0:", "    return False", "  # Check all the numbers of form 6k +/- 1, up to sqrt(n).", "  for x in range(6, int(math.sqrt(n)) + 2, 6):", "    if n % (x - 1) == 0 or n % (x + 1) == 0:",
        "      return False", "  return True"
    ]) + "(" + b + ")", Blockly.Arduino.ORDER_FUNCTION_CALL];
    switch (c) {
        case "EVEN":
            var d = b + " % 2 == 0";
            break;
        case "ODD":
            d = b + " % 2 == 1";
            break;
        case "WHOLE":
            d = b + " % 1 == 0";
            break;
        case "POSITIVE":
            d = b + " > 0";
            break;
        case "NEGATIVE":
            d = b + " < 0";
            break;
        case "DIVISIBLE_BY":
            a = Blockly.Arduino.valueToCode(a, "DIVISOR", Blockly.Arduino.ORDER_MULTIPLICATIVE);
            if (!a || "0" == a) return ["False", Blockly.Arduino.ORDER_ATOMIC];
            d = b + " % " + a + " == 0"
    }
    return [d, Blockly.Arduino.ORDER_RELATIONAL]
};
Blockly.Arduino.math_change = function(a) {
    // Blockly.Arduino.definitions_.from_numbers_import_Number = "from numbers import Number";
    var b = Blockly.Arduino.valueToCode(a, "DELTA", Blockly.Arduino.ORDER_ADDITIVE) || "0";
    a = Blockly.Arduino.variableDB_.getName(a.getFieldValue("VAR"), Blockly.Variables.NAME_TYPE);
    // return a + " = (" + a + " if isinstance(" + a + ", Number) else 0) + " + b + "\n"
    return a + " = " + a + " + " + b + ";\n";
};
Blockly.Arduino.math_round = Blockly.Arduino.math_single;
Blockly.Arduino.math_trig = Blockly.Arduino.math_single;
Blockly.Arduino.math_on_list = function(a) {
    var b = a.getFieldValue("OP");
    a = Blockly.Arduino.valueToCode(a, "LIST", Blockly.Arduino.ORDER_NONE) || "[]";
    switch (b) {
        case "SUM":
            b = "sum(" + a + ")";
            break;
        case "MIN":
            b = "min(" + a + ")";
            break;
        case "MAX":
            b = "max(" + a + ")";
            break;
        case "AVERAGE":
            // Blockly.Arduino.definitions_.from_numbers_import_Number = "from numbers import Number";
            b = Blockly.Arduino.provideFunction_("math_mean", ["def " + Blockly.Arduino.FUNCTION_NAME_PLACEHOLDER_ + "(myList):", "  localList = [e for e in myList if isinstance(e, Number)]",
                "  if not localList: return", "  return float(sum(localList)) / len(localList)"
            ]);
            b = b + "(" + a + ")";
            break;
        case "MEDIAN":
            // Blockly.Arduino.definitions_.from_numbers_import_Number = "from numbers import Number";
            b = Blockly.Arduino.provideFunction_("math_median", ["def " + Blockly.Arduino.FUNCTION_NAME_PLACEHOLDER_ + "(myList):", "  localList = sorted([e for e in myList if isinstance(e, Number)])", "  if not localList: return", "  if len(localList) % 2 == 0:", "    return (localList[len(localList) // 2 - 1] + localList[len(localList) // 2]) / 2.0",
                "  else:", "    return localList[(len(localList) - 1) // 2]"
            ]);
            b = b + "(" + a + ")";
            break;
        case "MODE":
            b = Blockly.Arduino.provideFunction_("math_modes", ["def " + Blockly.Arduino.FUNCTION_NAME_PLACEHOLDER_ + "(some_list):", "  modes = []", "  # Using a lists of [item, count] to keep count rather than dict", '  # to avoid "unhashable" errors when the counted item is itself a list or dict.', "  counts = []", "  maxCount = 1", "  for item in some_list:", "    found = False", "    for count in counts:", "      if count[0] == item:",
                "        count[1] += 1", "        maxCount = max(maxCount, count[1])", "        found = True", "    if not found:", "      counts.append([item, 1])", "  for counted_item, item_count in counts:", "    if item_count == maxCount:", "      modes.append(counted_item)", "  return modes"
            ]);
            b = b + "(" + a + ")";
            break;
        case "STD_DEV":
            Blockly.Arduino.definitions_.import_math = "import math";
            b = Blockly.Arduino.provideFunction_("math_standard_deviation", ["def " + Blockly.Arduino.FUNCTION_NAME_PLACEHOLDER_ + "(numbers):", "  n = len(numbers)",
                "  if n == 0: return", "  mean = float(sum(numbers)) / n", "  variance = sum((x - mean) ** 2 for x in numbers) / n", "  return math.sqrt(variance)"
            ]);
            b = b + "(" + a + ")";
            break;
        case "RANDOM":
            Blockly.Arduino.definitions_.import_random = "import random";
            b = "random.choice(" + a + ")";
            break;
        default:
            throw "Unknown operator: " + b;
    }
    return [b, Blockly.Arduino.ORDER_FUNCTION_CALL]
};
Blockly.Arduino.math_modulo = function(a) {
    var b = Blockly.Arduino.valueToCode(a, "DIVIDEND", Blockly.Arduino.ORDER_MULTIPLICATIVE) || "0";
    a = Blockly.Arduino.valueToCode(a, "DIVISOR", Blockly.Arduino.ORDER_MULTIPLICATIVE) || "0";
    return [b + " % " + a, Blockly.Arduino.ORDER_MULTIPLICATIVE]
};
Blockly.Arduino.math_constrain = function(a) {
    var b = Blockly.Arduino.valueToCode(a, "VALUE", Blockly.Arduino.ORDER_NONE) || "0",
        c = Blockly.Arduino.valueToCode(a, "LOW", Blockly.Arduino.ORDER_NONE) || "0";
    a = Blockly.Arduino.valueToCode(a, "HIGH", Blockly.Arduino.ORDER_NONE) || "float('inf')";
    return ["min(max(" + b + ", " + c + "), " + a + ")", Blockly.Arduino.ORDER_FUNCTION_CALL]
};
Blockly.Arduino.math_random_int = function(a) {
    Blockly.Arduino.definitions_.import_random = "import random";
    var b = Blockly.Arduino.valueToCode(a, "FROM", Blockly.Arduino.ORDER_NONE) || "0";
    a = Blockly.Arduino.valueToCode(a, "TO", Blockly.Arduino.ORDER_NONE) || "0";
    return ["random.randint(" + b + ", " + a + ")", Blockly.Arduino.ORDER_FUNCTION_CALL]
};
Blockly.Arduino.math_random_float = function(a) {
    Blockly.Arduino.definitions_.import_random = "import random";
    return ["random.random()", Blockly.Arduino.ORDER_FUNCTION_CALL]
};
Blockly.Arduino.procedures = {};
Blockly.Arduino.procedures_defreturn = function(a) {
    for (var b = [], c, d = a.workspace, e = Blockly.Variables.allUsedVarModels(d) || [], f = 0; c = e[f]; f++) c = c.name, -1 == a.arguments_.indexOf(c) && b.push(Blockly.Arduino.variableDB_.getName(c, Blockly.Variables.NAME_TYPE));
    d = Blockly.Variables.allDeveloperVariables(d);
    for (f = 0; f < d.length; f++) b.push(Blockly.Arduino.variableDB_.getName(d[f], Blockly.Names.DEVELOPER_VARIABLE_TYPE));
    b = b.length ? Blockly.Arduino.INDENT + "global " + b.join(", ") + "\n" : "";
    d = Blockly.Arduino.variableDB_.getName(a.getFieldValue("NAME"), Blockly.Procedures.NAME_TYPE);
    e = Blockly.Arduino.statementToCode(a, "STACK");
    Blockly.Arduino.STATEMENT_PREFIX && (f = a.id.replace(/\$/g, "$$$$"), e = Blockly.Arduino.prefixLines(Blockly.Arduino.STATEMENT_PREFIX.replace(/%1/g, "'" + f + "'"), Blockly.Arduino.INDENT) + e);
    Blockly.Arduino.INFINITE_LOOP_TRAP && (e = Blockly.Arduino.INFINITE_LOOP_TRAP.replace(/%1/g, '"' + a.id + '"') + e);
    (c = Blockly.Arduino.valueToCode(a, "RETURN", Blockly.Arduino.ORDER_NONE) || "") ? c = Blockly.Arduino.INDENT + "return " + c + "\n": e || (e = Blockly.Arduino.PASS);
    var g = [];
    for (f = 0; f < a.arguments_.length; f++) g[f] =
        Blockly.Arduino.variableDB_.getName(a.arguments_[f], Blockly.Variables.NAME_TYPE);
    b = "def " + d + "(" + g.join(", ") + "):\n" + b + e + c;
    b = Blockly.Arduino.scrub_(a, b);
    Blockly.Arduino.definitions_["%" + d] = b;
    return null
};
Blockly.Arduino.procedures_defnoreturn = Blockly.Arduino.procedures_defreturn;
Blockly.Arduino.procedures_callreturn = function(a) {
    for (var b = Blockly.Arduino.variableDB_.getName(a.getFieldValue("NAME"), Blockly.Procedures.NAME_TYPE), c = [], d = 0; d < a.arguments_.length; d++) c[d] = Blockly.Arduino.valueToCode(a, "ARG" + d, Blockly.Arduino.ORDER_NONE) || "None";
    return [b + "(" + c.join(", ") + ")", Blockly.Arduino.ORDER_FUNCTION_CALL]
};
Blockly.Arduino.procedures_callnoreturn = function(a) {
    for (var b = Blockly.Arduino.variableDB_.getName(a.getFieldValue("NAME"), Blockly.Procedures.NAME_TYPE), c = [], d = 0; d < a.arguments_.length; d++) c[d] = Blockly.Arduino.valueToCode(a, "ARG" + d, Blockly.Arduino.ORDER_NONE) || "None";
    return b + "(" + c.join(", ") + ")\n"
};
Blockly.Arduino.procedures_ifreturn = function(a) {
    var b = "if " + (Blockly.Arduino.valueToCode(a, "CONDITION", Blockly.Arduino.ORDER_NONE) || "False") + ":\n";
    a.hasReturnValue_ ? (a = Blockly.Arduino.valueToCode(a, "VALUE", Blockly.Arduino.ORDER_NONE) || "None", b += Blockly.Arduino.INDENT + "return " + a + "\n") : b += Blockly.Arduino.INDENT + "return\n";
    return b
};
Blockly.Arduino.texts = {};
Blockly.Arduino.text = function(a) {
    return [Blockly.Arduino.quote_(a.getFieldValue("TEXT")), Blockly.Arduino.ORDER_ATOMIC]
};
Blockly.Arduino.text_join = function(a) {
    switch (a.itemCount_) {
        case 0:
            return ["''", Blockly.Arduino.ORDER_ATOMIC];
        case 1:
            return ["str(" + (Blockly.Arduino.valueToCode(a, "ADD0", Blockly.Arduino.ORDER_NONE) || "''") + ")", Blockly.Arduino.ORDER_FUNCTION_CALL];
        case 2:
            var b = Blockly.Arduino.valueToCode(a, "ADD0", Blockly.Arduino.ORDER_NONE) || "''";
            a = Blockly.Arduino.valueToCode(a, "ADD1", Blockly.Arduino.ORDER_NONE) || "''";
            return ["str(" + b + ") + str(" + a + ")", Blockly.Arduino.ORDER_ADDITIVE];
        default:
            b = [];
            for (var c = 0; c < a.itemCount_; c++) b[c] =
                Blockly.Arduino.valueToCode(a, "ADD" + c, Blockly.Arduino.ORDER_NONE) || "''";
            a = Blockly.Arduino.variableDB_.getDistinctName("x", Blockly.Variables.NAME_TYPE);
            a = "''.join([str(" + a + ") for " + a + " in [" + b.join(", ") + "]])";
            return [a, Blockly.Arduino.ORDER_FUNCTION_CALL]
    }
};
Blockly.Arduino.text_append = function(a) {
    var b = Blockly.Arduino.variableDB_.getName(a.getFieldValue("VAR"), Blockly.Variables.NAME_TYPE);
    a = Blockly.Arduino.valueToCode(a, "TEXT", Blockly.Arduino.ORDER_NONE) || "''";
    return b + " = str(" + b + ") + str(" + a + ")\n"
};
Blockly.Arduino.text_length = function(a) {
    return ["len(" + (Blockly.Arduino.valueToCode(a, "VALUE", Blockly.Arduino.ORDER_NONE) || "''") + ")", Blockly.Arduino.ORDER_FUNCTION_CALL]
};
Blockly.Arduino.text_isEmpty = function(a) {
    return ["not len(" + (Blockly.Arduino.valueToCode(a, "VALUE", Blockly.Arduino.ORDER_NONE) || "''") + ")", Blockly.Arduino.ORDER_LOGICAL_NOT]
};
Blockly.Arduino.text_indexOf = function(a) {
    var b = "FIRST" == a.getFieldValue("END") ? "find" : "rfind",
        c = Blockly.Arduino.valueToCode(a, "FIND", Blockly.Arduino.ORDER_NONE) || "''";
    b = (Blockly.Arduino.valueToCode(a, "VALUE", Blockly.Arduino.ORDER_MEMBER) || "''") + "." + b + "(" + c + ")";
    return a.workspace.options.oneBasedIndex ? [b + " + 1", Blockly.Arduino.ORDER_ADDITIVE] : [b, Blockly.Arduino.ORDER_FUNCTION_CALL]
};
Blockly.Arduino.text_charAt = function(a) {
    var b = a.getFieldValue("WHERE") || "FROM_START",
        c = Blockly.Arduino.valueToCode(a, "VALUE", Blockly.Arduino.ORDER_MEMBER) || "''";
    switch (b) {
        case "FIRST":
            return [c + "[0]", Blockly.Arduino.ORDER_MEMBER];
        case "LAST":
            return [c + "[-1]", Blockly.Arduino.ORDER_MEMBER];
        case "FROM_START":
            return a = Blockly.Arduino.getAdjustedInt(a, "AT"), [c + "[" + a + "]", Blockly.Arduino.ORDER_MEMBER];
        case "FROM_END":
            return a = Blockly.Arduino.getAdjustedInt(a, "AT", 1, !0), [c + "[" + a + "]", Blockly.Arduino.ORDER_MEMBER];
        case "RANDOM":
            return Blockly.Arduino.definitions_.import_random =
                "import random", [Blockly.Arduino.provideFunction_("text_random_letter", ["def " + Blockly.Arduino.FUNCTION_NAME_PLACEHOLDER_ + "(text):", "  x = int(random.random() * len(text))", "  return text[x];"]) + "(" + c + ")", Blockly.Arduino.ORDER_FUNCTION_CALL]
    }
    throw "Unhandled option (text_charAt).";
};
Blockly.Arduino.text_getSubstring = function(a) {
    var b = a.getFieldValue("WHERE1"),
        c = a.getFieldValue("WHERE2"),
        d = Blockly.Arduino.valueToCode(a, "STRING", Blockly.Arduino.ORDER_MEMBER) || "''";
    switch (b) {
        case "FROM_START":
            b = Blockly.Arduino.getAdjustedInt(a, "AT1");
            "0" == b && (b = "");
            break;
        case "FROM_END":
            b = Blockly.Arduino.getAdjustedInt(a, "AT1", 1, !0);
            break;
        case "FIRST":
            b = "";
            break;
        default:
            throw "Unhandled option (text_getSubstring)";
    }
    switch (c) {
        case "FROM_START":
            a = Blockly.Arduino.getAdjustedInt(a, "AT2", 1);
            break;
        case "FROM_END":
            a =
                Blockly.Arduino.getAdjustedInt(a, "AT2", 0, !0);
            Blockly.isNumber(String(a)) ? "0" == a && (a = "") : (Blockly.Arduino.definitions_.import_sys = "import sys", a += " or sys.maxsize");
            break;
        case "LAST":
            a = "";
            break;
        default:
            throw "Unhandled option (text_getSubstring)";
    }
    return [d + "[" + b + " : " + a + "]", Blockly.Arduino.ORDER_MEMBER]
};
Blockly.Arduino.text_changeCase = function(a) {
    var b = {
        UPPERCASE: ".upper()",
        LOWERCASE: ".lower()",
        TITLECASE: ".title()"
    }[a.getFieldValue("CASE")];
    return [(Blockly.Arduino.valueToCode(a, "TEXT", Blockly.Arduino.ORDER_MEMBER) || "''") + b, Blockly.Arduino.ORDER_FUNCTION_CALL]
};
Blockly.Arduino.text_trim = function(a) {
    var b = {
        LEFT: ".lstrip()",
        RIGHT: ".rstrip()",
        BOTH: ".strip()"
    }[a.getFieldValue("MODE")];
    return [(Blockly.Arduino.valueToCode(a, "TEXT", Blockly.Arduino.ORDER_MEMBER) || "''") + b, Blockly.Arduino.ORDER_FUNCTION_CALL]
};
Blockly.Arduino.text_print = function(a) {
    return "print(" + (Blockly.Arduino.valueToCode(a, "TEXT", Blockly.Arduino.ORDER_NONE) || "''") + ")\n"
};
Blockly.Arduino.text_prompt_ext = function(a) {
    var b = Blockly.Arduino.provideFunction_("text_prompt", ["def " + Blockly.Arduino.FUNCTION_NAME_PLACEHOLDER_ + "(msg):", "  try:", "    return raw_input(msg)", "  except NameError:", "    return input(msg)"]),
        c = a.getField("TEXT") ? Blockly.Arduino.quote_(a.getFieldValue("TEXT")) : Blockly.Arduino.valueToCode(a, "TEXT", Blockly.Arduino.ORDER_NONE) || "''";
    b = b + "(" + c + ")";
    "NUMBER" == a.getFieldValue("TYPE") && (b = "float(" + b + ")");
    return [b, Blockly.Arduino.ORDER_FUNCTION_CALL]
};
Blockly.Arduino.text_prompt = Blockly.Arduino.text_prompt_ext;
Blockly.Arduino.text_count = function(a) {
    var b = Blockly.Arduino.valueToCode(a, "TEXT", Blockly.Arduino.ORDER_MEMBER) || "''";
    a = Blockly.Arduino.valueToCode(a, "SUB", Blockly.Arduino.ORDER_NONE) || "''";
    return [b + ".count(" + a + ")", Blockly.Arduino.ORDER_MEMBER]
};
Blockly.Arduino.text_replace = function(a) {
    var b = Blockly.Arduino.valueToCode(a, "TEXT", Blockly.Arduino.ORDER_MEMBER) || "''",
        c = Blockly.Arduino.valueToCode(a, "FROM", Blockly.Arduino.ORDER_NONE) || "''";
    a = Blockly.Arduino.valueToCode(a, "TO", Blockly.Arduino.ORDER_NONE) || "''";
    return [b + ".replace(" + c + ", " + a + ")", Blockly.Arduino.ORDER_MEMBER]
};
Blockly.Arduino.text_reverse = function(a) {
    return [(Blockly.Arduino.valueToCode(a, "TEXT", Blockly.Arduino.ORDER_MEMBER) || "''") + "[::-1]", Blockly.Arduino.ORDER_MEMBER]
};
Blockly.Arduino.variables = {};
Blockly.Arduino.variables_get = function(a) {
    return [Blockly.Arduino.variableDB_.getName(a.getFieldValue("VAR"), Blockly.Variables.NAME_TYPE), Blockly.Arduino.ORDER_ATOMIC]
};
Blockly.Arduino.variables_set = function(a) {
    var b = Blockly.Arduino.valueToCode(a, "VALUE", Blockly.Arduino.ORDER_NONE) || "0";
    return Blockly.Arduino.variableDB_.getName(a.getFieldValue("VAR"), Blockly.Variables.NAME_TYPE) + " = " + b + "\n"
};
Blockly.Arduino.variablesDynamic = {};
Blockly.Arduino.variables_get_dynamic = Blockly.Arduino.variables_get;
Blockly.Arduino.variables_set_dynamic = Blockly.Arduino.variables_set;